import { IAnalyserNode, IAudioBuffer, IAudioBufferSourceNode, IAudioContext, IAudioContextOptions, IAudioDestinationNode, IAudioListener, IAudioNode, IAudioWorklet, IBiquadFilterNode, IConstantSourceNode, IConvolverNode, IDelayNode, IDynamicsCompressorNode, IGainNode, IIIRFilterNode, IMediaElementAudioSourceNode, IMediaStreamAudioDestinationNode, IMediaStreamAudioSourceNode, IMediaStreamTrackAudioSourceNode, IOscillatorNode, IPannerNode, IPeriodicWave, IStereoPannerNode, IWaveShaperNode, TAudioContextState, TEventHandler } from 'standardized-audio-context';
import { EventTarget } from './event-target';
export declare class AudioContextMock extends EventTarget implements IAudioContext {
    private _deLorean;
    private _onstatechange;
    private _options;
    private _state;
    constructor(options?: IAudioContextOptions);
    get audioWorklet(): IAudioWorklet;
    get baseLatency(): number;
    get currentTime(): number;
    get destination(): IAudioDestinationNode<IAudioContext>;
    get listener(): IAudioListener;
    get onstatechange(): null | TEventHandler<IAudioContext>;
    set onstatechange(value: null | TEventHandler<IAudioContext>);
    get sampleRate(): number;
    get state(): TAudioContextState;
    close(): Promise<void>;
    createAnalyser(): IAnalyserNode<IAudioContext>;
    createBiquadFilter(): IBiquadFilterNode<IAudioContext>;
    createBuffer(numberOfChannels: number, length: number, sampleRate: number): IAudioBuffer;
    createBufferSource(): IAudioBufferSourceNode<IAudioContext>;
    createChannelMerger(): IAudioNode<IAudioContext>;
    createChannelSplitter(): IAudioNode<IAudioContext>;
    createConstantSource(): IConstantSourceNode<IAudioContext>;
    createConvolver(): IConvolverNode<IAudioContext>;
    createDelay(): IDelayNode<IAudioContext>;
    createDynamicsCompressor(): IDynamicsCompressorNode<IAudioContext>;
    createGain(): IGainNode<IAudioContext>;
    createIIRFilter(): IIIRFilterNode<IAudioContext>;
    createMediaElementSource(mediaElement: HTMLMediaElement): IMediaElementAudioSourceNode<this>;
    createMediaStreamDestination(): IMediaStreamAudioDestinationNode<this>;
    createMediaStreamSource(mediaStream: MediaStream): IMediaStreamAudioSourceNode<this>;
    createMediaStreamTrackSource(): IMediaStreamTrackAudioSourceNode<this>;
    createOscillator(): IOscillatorNode<IAudioContext>;
    createPanner(): IPannerNode<IAudioContext>;
    createPeriodicWave(): IPeriodicWave;
    createStereoPanner(): IStereoPannerNode<IAudioContext>;
    createWaveShaper(): IWaveShaperNode<IAudioContext>;
    decodeAudioData(): Promise<IAudioBuffer>;
    resume(): Promise<void>;
    suspend(): Promise<void>;
}
